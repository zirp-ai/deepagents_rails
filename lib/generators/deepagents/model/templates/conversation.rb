# frozen_string_literal: true

module Deepagents
  class <%= class_name %>Conversation < ApplicationRecord
    self.table_name = 'deepagents_<%= file_name %>_conversations'
    
    has_many :<%= file_name %>_messages, class_name: 'Deepagents::<%= class_name %>Message', foreign_key: 'conversation_id', dependent: :destroy
    has_many :<%= file_name %>_files, class_name: 'Deepagents::<%= class_name %>File', foreign_key: 'conversation_id', dependent: :destroy
    
    # Alias for easier access
    alias_method :messages, :<%= file_name %>_messages
    alias_method :files, :<%= file_name %>_files
    
    # Scopes
    scope :recent, -> { order(created_at: :desc) }
    
    # Convert to format expected by DeepAgents
    def to_agent_format
      {
        messages: messages.order(:created_at).map(&:to_agent_format),
        files: files_hash
      }
    end
    
    # Run the agent with the current conversation context
    def run_agent(input, agent_name = nil)
      # Create a new message for the user input
      user_message = messages.create!(
        role: 'user',
        content: input
      )
      
      # Get the service
      service = DeepagentsRails.service(agent_name)
      
      # Run the agent with the conversation context
      result = service.run(input, to_agent_format)
      
      # Create a new message for the agent response
      assistant_message = messages.create!(
        role: 'assistant',
        content: result[:response]
      )
      
      # Save any files generated by the agent
      if result[:files].present?
        result[:files].each do |filename, content|
          files.create!(
            filename: filename,
            content: content
          )
        end
      end
      
      # Return the result
      {
        message: assistant_message,
        files: result[:files]
      }
    end
    
    private
    
    # Convert files to hash format expected by DeepAgents
    def files_hash
      hash = {}
      files.each do |file|
        hash[file.filename] = file.content
      end
      hash
    end
  end
end
